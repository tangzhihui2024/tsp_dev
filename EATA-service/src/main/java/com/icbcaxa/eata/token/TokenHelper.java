package com.icbcaxa.eata.token;import io.jsonwebtoken.Claims;import io.jsonwebtoken.JwtBuilder;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import io.jsonwebtoken.impl.Base64Codec;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import javax.crypto.spec.SecretKeySpec;import javax.xml.bind.DatatypeConverter;import java.security.Key;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.Map;@Componentpublic class TokenHelper {	@Autowired	private TokenConfig tokenConfig;	public String createToken(String id, String issuer, String subject,Map<String,Object> info,String seed,Long validateTime) {//登录来源  创建时间		SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;		long nowMillis = System.currentTimeMillis();		Date now = new Date(nowMillis);		// 生成签名密钥 就是一个base64加密后的字符串？		byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(seed);		Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());				// 添加构成JWT的参数		JwtBuilder builder = Jwts.builder().setId(id).setHeaderParam("type", "JWT").setIssuedAt(now); // 创建时间		if(StringUtils.isNotBlank(subject)){			builder.setSubject(subject);		}		//发行者		if(StringUtils.isNotBlank(issuer)){			builder.setIssuer(issuer);		}else if(StringUtils.isNotBlank(tokenConfig.getIssuer())){			builder.setIssuer(tokenConfig.getIssuer());		}		// 估计是第三段密钥		builder.signWith(signatureAlgorithm, signingKey);		for (String keyM : info.keySet()) {			builder.claim(keyM, info.get(keyM));		}				// 添加Token过期时间		if (validateTime != null && validateTime > 0) {			long exp = 999999999999999L + nowMillis;			Date expDate = new Date(exp);			// 系统时间之前的token都是不可以被承认的			builder.setExpiration(expDate).setNotBefore(now);		}		// 生成JWT		return builder.compact();	}//	public static void main(String[] args) {//		long nowMillis = System.currentTimeMillis();//		Date now = new Date(nowMillis);//		Map<String, Object> info = new HashMap<>();//		info.put(GlobalConstant.CALL_SYSTEM,"REL");//		info.put(GlobalConstant.TARGET_SYSTEM,"MEB");//		info.put(GlobalConstant.TARGET_BUSINESS_MODULE,"SAVE");//		info.put(GlobalConstant.TARGET_BUSINESS_ENTRANCE,"IN");//		SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;//		byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary("UkVM");//		Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());//		JwtBuilder builder = Jwts.builder().setHeaderParam("type", "JWT").setIssuedAt(now) // 创建时间//				.setSubject("system")//				.setIssuer("fulan").signWith(signatureAlgorithm, signingKey); // 估计是第三段密钥//		for (String key : info.keySet()) {//			builder.claim(key, info.get(key));//		}//		System.out.println(JsonUtils.objectToJson(signingKey));//		System.out.println(com.alibaba.fastjson.JSON.toJSONString(builder));//	}	//更新授权码	public String updateAccredit(String token,Long validateTime,String seed){		try {			long nowMillis = System.currentTimeMillis();			Date now = new Date(nowMillis);			Claims claims=parseToken(token,seed);			String id=claims.getId();			String subject=claims.getSubject();			String issuer=claims.getIssuer();			Date date = claims.getExpiration();			return createToken(id, issuer, subject, getMapInfo(claims),seed,validateTime);		}catch (Exception ex){			ex.printStackTrace();		}		return "0";	}	//更新token	public void updateToken(String token,Long validateTime,String seed){		try {			long nowMillis = System.currentTimeMillis();			Date now = new Date(nowMillis);			Claims claims=parseToken(token,seed);			Date acb = claims.getExpiration();			// 添加Token过期时间			if (validateTime != null && validateTime > 0) {				long exp = validateTime + nowMillis;				Date expDate = new Date(exp);				if(claims !=null){					// 系统时间之前的token都是不可以被承认的					claims.setExpiration(expDate);//.setNotBefore(now);				}			}		}catch (Exception ex){			ex.printStackTrace();		}	}	private Map<String,Object> getMapInfo(Claims claims){		Map<String,Object> map = new HashMap<>();		Iterator<String> iterator = claims.keySet().iterator();		while (iterator.hasNext()){			String key = iterator.next();			if(!key.equals("sub") || !key.equals("exp") || !key.equals("iat")){				map.put(key,claims.get(key));			}		}		return map;	}	/**	 * 生成秘钥	 * @param key	 * @return	 */	public String createSecretBytes(String key){		Base64Codec base64Codec = new Base64Codec();		String keyStr = base64Codec.encode(key);		return keyStr;	}	/**	 * 解析JWT	 * @param token	 * @param seed	 * @return	 */	public Claims parseToken(String token, String seed) {		try {			Claims claims = Jwts.parser().setSigningKey(DatatypeConverter.parseBase64Binary(seed))					.parseClaimsJws(token).getBody();			return claims;		} catch (Exception ex) {			ex.printStackTrace();			return null;		}	}}